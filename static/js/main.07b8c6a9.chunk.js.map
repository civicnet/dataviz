{"version":3,"sources":["store/globalwarming/types.ts","store/globalwarming/actions.ts","components/GlobalWarmingMap.tsx","pages/GlobalWarming.tsx","routes/index.tsx","App.tsx","store/globalwarming/reducers.ts","store/index.ts","serviceWorker.ts","index.tsx"],"names":["RECEIVE_REGIONS","RECEIVE_SEA_LEVELS","SET_PLAYBACK_YEAR","TOGGLE_PLAYBACK","SET_SELECTED_REGION","CLEAR_SELECTED_REGION","receiveRegions","regions","type","receiveSeaLevels","levels","STATIC_ASSETS_HOST","process","fetchStaticAsset","asset","a","fetch","method","headers","Accept","items","json","fetchRegions","dispatch","getState","counties","Promise","resolve","regionData","data","uats","INITIAL_VIEW_STATE","width","window","innerWidth","height","innerHeight","longitude","latitude","zoom","maxZoom","minZoom","bearing","pitch","getCurrentSeaLevelIdx","year","maxLevel","seaLevelIndex","Math","round","Date","getFullYear","Map","connect","state","globalWarming","fetchSeaLevels","seaLevels","Array","fill","map","_","idx","toFixed","getSeaLevelFilepath","level","all","then","response","seaLevelsResponse","setSelectedRegion","region","selectedRegion","clearSelectedRegion","props","React","useState","gl","setGl","useRef","deck","useEffect","length","playback","currentSeaLevel","setSeaLevel","getDamagesForRegion","d","damages","properties","currentDamage","find","dmg","seaLevel","bldgs","Object","keys","reduce","acc","bldgType","layers","GeoJsonLayer","id","pickable","stroked","filled","lineWidthScale","lineWidthMinPixels","getLineColor","current","code","getLineWidth","getPolygon","features","updateTriggers","visible","extruded","getFillColor","foo","opacity","getElevation","transitions","duration","easing","d3","enter","value","ScatterplotLayer","autoHighlight","highlightColor","radiusScale","getPolygonOffset","radiusMaxPixels","lineWidthMaxPixels","lineWidthMaxixels","lineWidthUnits","getRadius","getPosition","pos","centroid","geometry","coordinates","onClick","object","amplitude","period","ref","initialViewState","controller","onWebGLInitialized","preventStyleDiffing","mapStyle","mapboxApiAccessToken","onLoad","currentMap","getMap","getStyle","waterSymbolIdx","i","addLayer","MapboxLayer","useStyles","makeStyles","theme","createStyles","root","flex","faIcon","card","bottom","zIndex","right","position","details","display","flexDirection","cover","controls","alignItems","paddingLeft","spacing","paddingBottom","paddingRight","playIcon","cardContent","stats","top","color","statsSecondary","statsTitle","GlobalWarming","setPlaybackYear","togglePlayback","classes","animationFrame","setAnimationFrame","interval","isPlaying","setInterval","clearInterval","damagesForCurrentRegion","className","Typography","variant","component","name","county","List","ListItem","ListItemAvatar","Icon","clsx","ListItemText","secondary","primary","area","flooded","coverage","floor","pop2015","Card","CardContent","Grid","container","item","IconButton","aria-label","xs","style","alignSelf","Slider","min","max","step","onChange","aria-labelledby","valueLabelDisplay","routes","path","exact","sidebar","main","icon","globalTheme","createMuiTheme","palette","list","fullList","appBar","drawer","transition","create","sharp","leavingScreen","appBarShift","marginLeft","enteringScreen","menuButton","marginRight","hide","flexShrink","whiteSpace","drawerPaper","backgroundColor","background","paper","drawerOpen","drawerClose","overflowX","toolbar","justifyContent","padding","mixins","content","flexGrow","symbolLogo","margin","logoContainer","paddiogTop","App","useTheme","isDrawerOpen","setDrawerOpen","loadCSS","document","querySelector","ThemeProvider","CssBaseline","Drawer","open","Divider","alt","src","route","index","to","forwardRef","innerRef","button","key","ListItemIcon","initialState","rootReducer","combineReducers","action","undefined","reduxDevtoolsExtensionOptions","actionSanitizer","stateSanitizer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","logger","createLogger","collapsed","predicate","store","createStore","applyMiddleware","thunk","Boolean","location","hostname","match","ReactDOM","render","basename","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.07b8c6a9.chunk.js","sourcesContent":["export type RegionType = 'UAT' | 'County';\n\nexport interface RegionProperties {\n  code: string,\n  county: string;\n  countyCode: string;\n  countyMn: string;\n  damages: Damages[];\n  name: string;\n  natLevName: string;\n  pop2011: number;\n  pop2012: number;\n  pop2013: number;\n  pop2014: number;\n  pop2015: number;\n  totalArea: number;\n  centroid: {\n    latitude: number;\n    longitude: number;\n  }\n}\n\nexport interface Region {\n  geometry: {\n    type: string,\n    coordinates: any[],\n  };\n  properties: RegionProperties,\n};\n\nexport interface RegionData {\n  type: RegionType;\n  data: Region[];\n}\n\nexport type SeaLevel = any;\n\nexport interface DamagedBuildingsListing {\n  [key: string]: number,\n}\n\nexport interface Damages {\n  seaLevel: number;\n  bldgs?: DamagedBuildingsListing;\n  area: {\n    flooded: number;\n    coverage: number;\n  }\n}\n\nexport interface GlobalWarmingState {\n  uats: Region[];\n  counties: Region[];\n  seaLevels: SeaLevel[];\n  playback: {\n    year: number;\n    isPlaying: boolean;\n  },\n  selectedRegion?: RegionProperties,\n}\n\nexport const RECEIVE_REGIONS = 'RECEIVE_REGIONS';\nexport const RECEIVE_SEA_LEVELS = 'RECEIVE_SEA_LEVELS';\nexport const SET_PLAYBACK_YEAR = 'SET_PLAYBACK_YEAR';\nexport const TOGGLE_PLAYBACK = 'TOGGLE_PLAYBACK';\nexport const SET_SELECTED_REGION = 'SET_CURRENT_REGION';\nexport const CLEAR_SELECTED_REGION = 'CLEAR_CURRENT_REGION';\n\nexport interface SetSelectedRegionAction {\n  type: typeof SET_SELECTED_REGION;\n  selectedRegion: RegionProperties;\n}\n\nexport interface ClearSelectedRegionAction {\n  type: typeof CLEAR_SELECTED_REGION;\n}\n\nexport interface TogglePlaybackAction {\n  type: typeof TOGGLE_PLAYBACK;\n}\n\nexport interface SetPlaybackYearAction {\n  type: typeof SET_PLAYBACK_YEAR;\n  year: number;\n}\n\nexport interface ReceiveRegionsAction {\n  type: typeof RECEIVE_REGIONS;\n  regions: RegionData;\n}\n\nexport interface ReceiveSeaLevelsAction {\n  type: typeof RECEIVE_SEA_LEVELS;\n  levels: any[];\n}\n\nexport type GlobalWarmingActions =\n  ReceiveRegionsAction\n  | ClearSelectedRegionAction\n  | SetSelectedRegionAction\n  | ReceiveSeaLevelsAction\n  | SetPlaybackYearAction\n  | TogglePlaybackAction;\n","import {\n  RECEIVE_REGIONS,\n  ReceiveRegionsAction,\n  RegionData,\n  SeaLevel,\n  ReceiveSeaLevelsAction,\n  RECEIVE_SEA_LEVELS,\n  GlobalWarmingState,\n  RegionType,\n  SetPlaybackYearAction,\n  SET_PLAYBACK_YEAR,\n  TogglePlaybackAction,\n  TOGGLE_PLAYBACK,\n  SET_SELECTED_REGION,\n  SetSelectedRegionAction,\n  CLEAR_SELECTED_REGION,\n  ClearSelectedRegionAction,\n  RegionProperties\n} from \"./types\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { Action } from \"redux\";\n\nexport function receiveRegions(regions: RegionData): ReceiveRegionsAction {\n  return {\n    type: RECEIVE_REGIONS,\n    regions\n  };\n}\n\nexport function receiveSeaLevels(levels: SeaLevel[]): ReceiveSeaLevelsAction {\n  return {\n    type: RECEIVE_SEA_LEVELS,\n    levels\n  };\n}\n\nexport function togglePlayback(): TogglePlaybackAction {\n  return {\n    type: TOGGLE_PLAYBACK,\n  }\n}\n\nexport function setPlaybackYear(year: number): SetPlaybackYearAction {\n  return {\n    type: SET_PLAYBACK_YEAR,\n    year\n  }\n}\n\nexport function setSelectedRegion(\n  region: RegionProperties,\n): SetSelectedRegionAction {\n  return {\n    type: SET_SELECTED_REGION,\n    selectedRegion: region\n  }\n}\n\nexport function clearSelectedRegion(): ClearSelectedRegionAction {\n  return {\n    type: CLEAR_SELECTED_REGION,\n  }\n}\n\nconst STATIC_ASSETS_HOST = `${process.env.PUBLIC_URL}/data/`;\n\nconst fetchStaticAsset = async (asset: string) => {\n  const items = await fetch(`${STATIC_ASSETS_HOST}${asset}`, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\"\n    }\n  });\n\n  return items.json();\n};\n\nexport const fetchRegions = (\n  type: RegionType\n): ThunkAction<void, GlobalWarmingState, null, Action<string>> => async (\n  dispatch,\n  getState\n) => {\n  let regionData: RegionData; // = [];\n  if (type === \"County\") {\n    if (getState().counties) {\n      return Promise.resolve();\n    }\n\n    const regions = await fetchStaticAsset(\"enhancedCounties.json\");\n    regionData = {\n      type: 'County',\n      data: regions,\n    };\n\n  } else {\n    if (getState().uats) {\n      return Promise.resolve();\n    }\n\n    const regions = await fetchStaticAsset(\"enhancedUATs.json\");\n    regionData = {\n      type: 'UAT',\n      data: regions,\n    };\n\n  }\n\n  dispatch(receiveRegions(regionData));\n};\n\nexport const fetchSeaLevels = (\n): ThunkAction<void, GlobalWarmingState, null, Action<string>> => async (\n  dispatch,\n  getState\n) => {\n  if (getState().seaLevels) {\n    return Promise.resolve();\n  }\n\n  const levels = [...Array(22).fill(null)].map((_, idx) =>\n    idx ? (idx / 10 - 0.3).toFixed(1) : `-0.3`\n  );\n\n  const getSeaLevelFilepath = (level: number | string) => {\n    if (typeof level === \"number\") {\n      level = level.toFixed(1);\n    }\n    return `${process.env.PUBLIC_URL}/data/sea_levels/${level}.json`;\n  };\n\n  const seaLevelsResponse = await Promise.all(\n    levels.map(level =>\n      fetch(getSeaLevelFilepath(level), {\n        method: \"GET\",\n        headers: {\n          Accept: \"application/json\"\n        }\n      }).then(response => response.json())\n    )\n  );\n\n  dispatch(receiveSeaLevels(seaLevelsResponse));\n}\n","import React, { useRef, useEffect } from \"react\";\nimport DeckGL from \"deck.gl\";\nimport { GeoJsonLayer, ScatterplotLayer } from \"@deck.gl/layers\";\nimport { StaticMap } from \"react-map-gl\";\nimport { MapboxLayer } from \"@deck.gl/mapbox\";\n\nimport centroid from \"@turf/centroid\";\n\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport { AppState } from \"../store\";\nimport {\n  RegionType,\n  GlobalWarmingState,\n  Region,\n  RegionProperties\n} from \"../store/globalwarming/types\";\nimport {\n  fetchRegions,\n  fetchSeaLevels,\n  clearSelectedRegion,\n  setSelectedRegion\n} from \"../store/globalwarming/actions\";\nimport { connect } from \"react-redux\";\n\nimport * as d3 from \"d3-ease\";\nimport { MapboxMap } from \"./types\";\n\nconst INITIAL_VIEW_STATE = {\n  width: window.innerWidth,\n  height: window.innerHeight,\n  longitude: 29.4026143,\n  latitude: 44.5968449,\n  zoom: 7.6,\n  maxZoom: 20,\n  minZoom: 6,\n  bearing: 0,\n  pitch: 0\n};\n\nconst mapStateToProps = (state: AppState) => ({\n  globalWarming: state.globalWarming\n});\n\nconst mapDispatchToProps = (dispatch: any) => ({\n  fetchRegions: (type: RegionType) => dispatch(fetchRegions(type)),\n  fetchSeaLevels: () => dispatch(fetchSeaLevels()),\n  setSelectedRegion: (region: RegionProperties) => dispatch(setSelectedRegion(region)),\n  clearSelectedRegion: () => dispatch(clearSelectedRegion()),\n});\n\ninterface Props {\n  globalWarming: GlobalWarmingState;\n  fetchRegions: typeof fetchRegions;\n  fetchSeaLevels: typeof fetchSeaLevels;\n  setSelectedRegion: typeof setSelectedRegion;\n  clearSelectedRegion: typeof clearSelectedRegion;\n\n  setSeaLevel: (level: number) => void;\n}\n\nexport const getCurrentSeaLevelIdx = (year: number, maxLevel: number) => {\n  let seaLevelIndex = Math.round((year - new Date().getFullYear()) / 4.5);\n  if (seaLevelIndex >= maxLevel) {\n    seaLevelIndex = maxLevel - 1;\n  }\n\n  return seaLevelIndex;\n};\n\nconst ConnectedMap: React.FC<Props> = (props: Props) => {\n  const [gl, setGl] = React.useState();\n\n  const map = useRef(null);\n  const deck = useRef(null);\n\n  const onWebGLInitialized = (gl: any) => {\n    setGl(gl);\n  };\n\n  const getMap = (): MapboxMap | null => {\n    if (!map.current) {\n      return null;\n    }\n\n    // @ts-ignore\n    return map.current.getMap();\n  };\n\n  const onMapLoad = () => {\n    const currentMap = getMap();\n    if (!currentMap) {\n      return;\n    }\n\n    const layers = currentMap.getStyle().layers;\n    // Find the index of the first symbol layer in the map style\n    let waterSymbolIdx = 0;\n    for (var i = 0; i < layers.length; i++) {\n      if (layers[i].id === \"water\") {\n        waterSymbolIdx = i;\n        break;\n      }\n    }\n\n    currentMap.addLayer(\n      new MapboxLayer({\n        id: \"sea-level\",\n        // @ts-ignore\n        deck: deck.current.deck\n      }),\n      layers[waterSymbolIdx + 1].id\n    );\n\n    currentMap.addLayer(\n      new MapboxLayer({\n        id: \"geojson-layer-uats\",\n        // @ts-ignore\n        deck: deck.current.deck\n      }),\n      \"sea-level\"\n    );\n\n    currentMap.addLayer(\n      new MapboxLayer({\n        id: \"scatter\",\n        // @ts-ignore\n        deck: deck.current.deck\n      })\n    );\n  };\n\n  const {\n    fetchRegions,\n    fetchSeaLevels\n  } = props;\n\n  useEffect(() => {\n    fetchRegions(\"County\");\n    fetchRegions(\"UAT\");\n    fetchSeaLevels();\n  }, [fetchRegions, fetchSeaLevels]);\n\n  if (\n    !props.globalWarming.seaLevels.length ||\n    !props.globalWarming.counties.length ||\n    !props.globalWarming.uats.length\n  ) {\n    return null;\n  }\n\n  const seaLevelIndex = getCurrentSeaLevelIdx(\n    props.globalWarming.playback.year,\n    props.globalWarming.seaLevels.length\n  );\n\n  const currentSeaLevel = props.globalWarming.seaLevels.length\n    ? props.globalWarming.seaLevels[seaLevelIndex]\n    : { type: \"Polygon\" };\n\n  props.setSeaLevel(seaLevelIndex * 10);\n\n  const getDamagesForRegion = (d: any) => {\n    const damages = d.properties.damages;\n    if (!damages) {\n      return 0;\n    }\n\n    const currentDamage = damages.find(\n      (dmg: any) => dmg.seaLevel === seaLevelIndex\n    );\n    if (!currentDamage) {\n      return 0;\n    }\n\n    // return currentDamage.area.coverage;\n\n    const bldgs = currentDamage.bldgs;\n    if (!bldgs) {\n      return 0;\n    }\n\n    return Object.keys(bldgs).reduce((acc, bldgType) => {\n      return acc + bldgs[bldgType];\n    }, 0);\n  };\n\n  let layers = [\n    new GeoJsonLayer({\n      id: \"geojson-layer-uats\",\n      data: props.globalWarming.uats,\n      pickable: false,\n      stroked: true,\n      filled: false,\n      lineWidthScale: 1,\n      lineWidthMinPixels: 1,\n      getLineColor: (d: any) => {\n        const current = props.globalWarming.selectedRegion;\n        if (!current) {\n          return [0, 0, 0, 0];\n        }\n\n        if (d.properties.code === current.code) {\n          return [255, 255, 255, 255];\n        }\n\n        return [0, 0, 0, 0];\n      },\n      getLineWidth: 1,\n      getPolygon: (d: any) => ({\n        type: \"FeatureCollection\",\n        features: [d]\n      }),\n      updateTriggers: {\n        getLineColor: props.globalWarming.selectedRegion,\n      }\n    }),\n    new GeoJsonLayer({\n      id: \"geojson-layer-counties\",\n      data: props.globalWarming.counties,\n      pickable: false,\n      stroked: true,\n      filled: false,\n      lineWidthScale: 1,\n      lineWidthMinPixels: 1,\n      getLineColor: [0, 0, 0, 255],\n      getLineWidth: 2,\n      getPolygon: (d: any) => ({\n        type: \"FeatureCollection\",\n        features: [d]\n      }),\n      visible: false\n    }),\n    new GeoJsonLayer({\n      id: \"sea-level\",\n      data: currentSeaLevel,\n      pickable: false,\n      stroked: false,\n      filled: true,\n      extruded: true,\n      // getPolygonOffset: () => [0, 100],\n      getFillColor: (d: any, foo: any) => {\n        return [0, 105, 148];\n      },\n      opacity: 0.5,\n      getElevation: (d: any) => {\n        return d.properties.level;\n      },\n      transitions: {\n        getFillColor: {\n          duration: 600,\n          easing: d3.easeLinear,\n          // enter: 0,\n          enter: (value: any) => [value[0], value[1], value[2], 0] // fade in\n        }\n      }\n    }),\n    new ScatterplotLayer({\n      id: \"scatter\",\n      data: props.globalWarming.uats,\n      pickable: true,\n      autoHighlight: true,\n      highlightColor: [255, 0, 0, 128],\n      filled: true,\n      stroked: true,\n      radiusScale: 4,\n      getPolygonOffset: () => {\n        return [0, -100];\n      },\n      radiusMaxPixels: 40,\n      lineWidthMaxPixels: 4,\n      lineWidthMaxixels: 2,\n      lineWidthUnits: \"pixels\",\n      getRadius: (d: any) => {\n        return getDamagesForRegion(d);\n      },\n      getLineWidth: (d: any) => {\n        const dmgs = getDamagesForRegion(d);\n        if (dmgs) {\n          return 1;\n        } else {\n          return null;\n        }\n      },\n      getFillColor: (d: any) => {\n        if (props.globalWarming.selectedRegion) {\n          if (props.globalWarming.selectedRegion.code === d.properties.code) {\n            return [255, 0, 0, 128];\n          }\n        }\n\n        return [255, 0, 0, 70];\n      },\n      getLineColor: [255, 0, 0, 255],\n      getPosition: (d: any) => {\n        const pos = centroid(d);\n        return pos.geometry ? pos.geometry.coordinates : null;\n      },\n      onClick: ({ object }: { object: Region } ) => {\n        if (!object) {\n          return;\n        }\n\n        props.setSelectedRegion(object.properties);\n      },\n      updateTriggers: {\n        getRadius: seaLevelIndex,\n        getFillColor: props.globalWarming.selectedRegion\n      },\n      transitions: {\n        getRadius: {\n          duration: 300,\n          easing: d3.easeElasticIn.amplitude(1.75).period(1),\n          enter: 0\n        }\n      }\n    })\n  ];\n\n  const mapboxStyleURL =\n    process.env.NODE_ENV === \"production\"\n      ? \"mapbox://styles/claudiuc/cjzfv9blf11q21cphdwsik2tr/draft\"\n      : \"mapbox://styles/claudiuc/cjzfv9blf11q21cphdwsik2tr/draft\";\n\n  return (\n    <DeckGL\n      ref={deck}\n      layers={layers}\n      initialViewState={INITIAL_VIEW_STATE}\n      controller={true}\n      onWebGLInitialized={onWebGLInitialized}\n    >\n      {gl && (\n        <StaticMap\n          width=\"100%\"\n          height=\"100%\"\n          // reuseMaps={true}\n          preventStyleDiffing={true}\n          ref={map}\n          mapStyle={mapboxStyleURL}\n          mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\n          gl={gl}\n          onLoad={onMapLoad}\n        />\n      )}\n    </DeckGL>\n  );\n};\n\nconst Map = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ConnectedMap);\n\nexport default Map;\n","import React from \"react\";\nimport clsx from \"clsx\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  List,\n  ListItem,\n  ListItemText,\n  IconButton,\n  Theme,\n  createStyles,\n  Icon,\n  Card,\n  CardContent,\n  Typography,\n  Grid,\n  Slider,\n  ListItemAvatar\n} from \"@material-ui/core\";\n\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport Map, { getCurrentSeaLevelIdx } from \"../components/GlobalWarmingMap\";\nimport { AppState } from \"../store\";\n\nimport { RegionType, GlobalWarmingState, Region } from \"../store/globalwarming/types\";\nimport {\n  fetchRegions,\n  setPlaybackYear,\n  togglePlayback\n} from \"../store/globalwarming/actions\";\nimport { connect } from \"react-redux\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flex: 1\n    },\n    faIcon: {\n      width: \"unset\"\n    },\n    card: {\n      bottom: 100,\n      width: 600,\n      zIndex: 1000,\n      right: 100,\n      position: \"absolute\"\n    },\n    details: {\n      display: \"flex\",\n      flexDirection: \"column\"\n    },\n    cover: {\n      width: 151\n    },\n    controls: {\n      display: \"flex\",\n      alignItems: \"center\",\n      paddingLeft: theme.spacing(1),\n      paddingBottom: theme.spacing(1),\n      paddingRight: theme.spacing(3)\n    },\n    playIcon: {\n    },\n    cardContent: {\n      flex: \"1 0 auto\"\n    },\n    stats: {\n      width: 600,\n      position: \"absolute\",\n      top: 100,\n      right: 100,\n      color: \"#fff\"\n    },\n    statsSecondary: {\n      color: \"#ABC\"\n    },\n    statsTitle: {\n      paddingLeft: 72\n    }\n  })\n);\n\nconst YEAR_CHANGE_RATE = 5;\nconst FPS = 60;\nconst FRAME_DURATION = 1000 / FPS;\n\nconst mapStateToProps = (state: AppState) => ({\n  globalWarming: state.globalWarming\n});\n\nconst mapDispatchToProps = (dispatch: any) => ({\n  fetchRegions: (type: RegionType) => dispatch(fetchRegions(type)),\n  setPlaybackYear: (year: number) => dispatch(setPlaybackYear(year)),\n  togglePlayback: () => dispatch(togglePlayback())\n});\n\ninterface Props {\n  globalWarming: GlobalWarmingState;\n  fetchRegions: typeof fetchRegions;\n  setPlaybackYear: typeof setPlaybackYear;\n  togglePlayback: typeof togglePlayback;\n}\n\nconst ConnectedGlobalWarming: React.FC<Props> = (props: Props) => {\n  const classes = useStyles();\n\n  const [animationFrame, setAnimationFrame] = React.useState(0);\n  const [seaLevel, setSeaLevel] = React.useState(0);\n\n  React.useEffect(() => {\n    let interval: any = null;\n    if (props.globalWarming.playback.isPlaying) {\n      interval = setInterval(() => {\n        setAnimationFrame(animationFrame + 1);\n\n        if (animationFrame !== 0 && animationFrame % YEAR_CHANGE_RATE === 0) {\n          if (props.globalWarming.playback.year === 2100) {\n            props.togglePlayback();\n            return;\n          }\n\n          props.setPlaybackYear(props.globalWarming.playback.year + 1);\n        }\n      }, FRAME_DURATION);\n    } else if (\n      !props.globalWarming.playback.isPlaying &&\n      animationFrame !== 0\n    ) {\n      clearInterval(interval);\n    }\n\n    return () => clearInterval(interval);\n  });\n\n  const setSeaLevelTween = (level: number) => {\n    setSeaLevel(level * 10);\n  };\n\n  const handleSliderChange = (_: any, value: number | number[]) => {\n    if (props.globalWarming.playback.isPlaying) {\n      props.togglePlayback();\n    }\n\n    props.setPlaybackYear(typeof value === \"number\" ? value : value[0]);\n  };\n\n  const seaLevelIndex = getCurrentSeaLevelIdx(\n    props.globalWarming.playback.year,\n    props.globalWarming.seaLevels.length\n  );\n\n  const damagesForCurrentRegion = props.globalWarming.selectedRegion\n    ? (props.globalWarming.selectedRegion.damages || []).find(dmg => {\n        return dmg.seaLevel === seaLevelIndex;\n      })\n    : null;\n/*\n  const damagesForAll = props.globalWarming.uats.reduce((acc: any, uat: Region) => {\n    const damagesForUat = (uat.properties.damages || []).find(dmg => {\n      return dmg.seaLevel === seaLevelIndex;\n    });\n\n    if (!damagesForUat) {\n      return acc;\n    }\n\n    const floodedArea = acc.floodedArea + damagesForUat.area.flooded;\n    const totalArea = acc.totalArea + uat.properties.totalArea;\n    const population = acc.population + uat.properties.pop2015;\n    const bldgs = acc.bldgs + Number(damagesForUat.bldgs);\n    const coverage = Number((floodedArea * 100) / totalArea).toFixed(2);\n    const refugees = Math.round((Number(coverage) / 100) * population);\n\n    return {\n      floodedArea,\n      totalArea,\n      coverage,\n      bldgs,\n      population,\n      refugees,\n    }\n  }, {\n    floodedArea: 0,\n    totalArea: 0,\n    coverage: 0,\n    bldgs: 0,\n    population: 0,\n    refugees: 0,\n  });\n   */\n  return (\n    <>\n      <Map setSeaLevel={setSeaLevelTween} />\n      {damagesForCurrentRegion && (\n        <div className={classes.stats}>\n          <Typography\n            variant=\"h5\"\n            component=\"h5\"\n            className={classes.statsTitle}\n          >\n            {props.globalWarming.selectedRegion &&\n              props.globalWarming.selectedRegion.name}\n          </Typography>\n          <Typography\n            variant=\"subtitle1\"\n            component=\"span\"\n            className={classes.statsTitle}\n          >\n            Județul{\" \"}\n            {props.globalWarming.selectedRegion &&\n              props.globalWarming.selectedRegion.county}\n          </Typography>\n\n          <List>\n            <ListItem>\n              <ListItemAvatar>\n                <Icon className={clsx(\"fal fa-ruler-combined\")} />\n              </ListItemAvatar>\n              <ListItemText\n                classes={{\n                  secondary: classes.statsSecondary\n                }}\n                primary={`${(\n                  damagesForCurrentRegion.area.flooded * 1.0e-6\n                ).toFixed(2)} km²`}\n                secondary=\"Suprafața de teren acoperită de apă\"\n              />\n            </ListItem>\n\n            <ListItem>\n              <ListItemAvatar>\n                <Icon className={clsx(\"fal fa-chart-pie-alt\")} />\n              </ListItemAvatar>\n              <ListItemText\n                classes={{\n                  secondary: classes.statsSecondary\n                }}\n                primary={`${damagesForCurrentRegion.area.coverage.toFixed(2)}%`}\n                secondary=\"Proporție totală acoperită de apă\"\n              />\n            </ListItem>\n\n            <ListItem>\n              <ListItemAvatar>\n                <Icon className={clsx(classes.faIcon, \"fal fa-house-flood\")} />\n              </ListItemAvatar>\n              <ListItemText\n                classes={{\n                  secondary: classes.statsSecondary\n                }}\n                primary={\n                  damagesForCurrentRegion.bldgs\n                    ? damagesForCurrentRegion.bldgs[\"other\"]\n                    : 0\n                }\n                secondary=\"Numărul de clădiri inundate\"\n              />\n            </ListItem>\n\n            <ListItem>\n              <ListItemAvatar>\n                <Icon className={clsx(classes.faIcon, \"fal fa-hiking\")} />\n              </ListItemAvatar>\n              <ListItemText\n                classes={{\n                  secondary: classes.statsSecondary\n                }}\n                primary={\n                  props.globalWarming.selectedRegion\n                    ? Math.floor(\n                        props.globalWarming.selectedRegion.pop2015 *\n                          (damagesForCurrentRegion.area.coverage / 100)\n                      )\n                    : 0\n                }\n                secondary=\"Numărul de persoane evacuate\"\n              />\n            </ListItem>\n          </List>\n        </div>\n      )}\n\n      <Card className={classes.card}>\n        <div className={classes.details}>\n          <CardContent className={classes.cardContent}>\n            <Typography component=\"h1\" variant=\"h3\">\n              {props.globalWarming.playback.year}\n            </Typography>\n            <Typography variant=\"subtitle1\" color=\"textSecondary\">\n              Nivelul mării estimat la {seaLevel}mm\n            </Typography>\n          </CardContent>\n\n          <div className={classes.controls}>\n            <Grid container spacing={2}>\n              <Grid item>\n                <IconButton\n                  aria-label=\"play/pause\"\n                  onClick={props.togglePlayback}\n                >\n                  {props.globalWarming.playback.isPlaying ? (\n                    <Icon className={clsx(classes.playIcon, \"fal fa-pause\")} />\n                  ) : (\n                    <Icon className={clsx(classes.playIcon, \"fal fa-play\")} />\n                  )}\n                </IconButton>\n              </Grid>\n              <Grid item xs style={{ alignSelf: \"center\" }}>\n                <Slider\n                  value={props.globalWarming.playback.year}\n                  min={new Date().getFullYear()}\n                  max={2100}\n                  step={1}\n                  onChange={handleSliderChange}\n                  aria-labelledby=\"continuous-slider\"\n                  valueLabelDisplay=\"auto\"\n                />\n              </Grid>\n            </Grid>\n          </div>\n        </div>\n      </Card>\n    </>\n  );\n};\n\nconst GlobalWarming = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ConnectedGlobalWarming);\n\nexport default GlobalWarming;\n","import React from 'react';\nimport GlobalWarming from \"../pages/GlobalWarming\";\n// import ConnectedThreeJSMap from '../components/ThreeJSMap';\n\nexport const routes = [\n  {\n    path: \"/\",\n    exact: false,\n    sidebar: () => null,\n    main: () => <GlobalWarming />,\n    icon: 'fal fa-water',\n    name: 'Schimbări climatice',\n  },\n  {\n    path: \"/avalanche/\",\n    sidebar: () => null,\n    main: () => <GlobalWarming />,\n    icon: 'fal fa-mountain',\n    name: 'Risc de avalanșă',\n  },\n];\n","import React from \"react\";\nimport clsx from \"clsx\";\nimport { loadCSS } from \"fg-loadcss\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Divider,\n  Drawer,\n  useTheme,\n  CssBaseline,\n  IconButton,\n  Theme,\n  createStyles,\n  Icon,\n  createMuiTheme\n} from \"@material-ui/core\";\n\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport { ThemeProvider } from \"@material-ui/styles\";\n\nimport { Route, Link, LinkProps } from \"react-router-dom\";\n\nimport { routes } from \"./routes\";\n\nconst globalTheme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#6a1b9a\"\n    },\n    secondary: {\n      main: \"#009688\"\n    }\n  }\n});\n\nconst drawerWidth = 240;\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flex: 1\n    },\n    list: {\n      width: 250\n    },\n    fullList: {\n      width: \"auto\"\n    },\n    appBar: {\n      zIndex: theme.zIndex.drawer + 1,\n      transition: theme.transitions.create([\"width\", \"margin\"], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen\n      })\n    },\n    appBarShift: {\n      marginLeft: drawerWidth,\n      width: `calc(100% - ${drawerWidth}px)`,\n      transition: theme.transitions.create([\"width\", \"margin\"], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.enteringScreen\n      })\n    },\n    menuButton: {\n      marginRight: 36\n    },\n    hide: {\n      display: \"none\"\n    },\n    drawer: {\n      width: drawerWidth,\n      flexShrink: 0,\n      whiteSpace: \"nowrap\"\n    },\n    drawerPaper: {\n      backgroundColor: theme.palette.background.paper\n    },\n    drawerOpen: {\n      width: drawerWidth,\n      transition: theme.transitions.create(\"width\", {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.enteringScreen\n      })\n    },\n    drawerClose: {\n      transition: theme.transitions.create(\"width\", {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen\n      }),\n      overflowX: \"hidden\",\n      width: theme.spacing(7) + 1\n    },\n    toolbar: {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"flex-end\",\n      padding: \"0 8px\",\n      ...theme.mixins.toolbar\n    },\n    content: {\n      flexGrow: 1,\n      padding: theme.spacing(3)\n    },\n    faIcon: {\n      width: \"unset\"\n    },\n    symbolLogo: {\n      height: 32,\n      margin: \"0 auto\",\n      display: \"inherit\"\n    },\n    logoContainer: {\n      padding: theme.spacing(1),\n      paddiogTop: theme.spacing(2),\n      paddingBottom: theme.spacing(2)\n    }\n  })\n);\n\ninterface Props {}\n\nconst CollisionLink = (to: string) =>\n  React.forwardRef<HTMLAnchorElement, Omit<LinkProps, \"innerRef\" | \"to\">>(\n    (props, ref) => <Link innerRef={ref as any} to={to} {...props} />\n  );\n\nconst App: React.FC<Props> = (props: Props) => {\n  const classes = useStyles();\n  const theme = useTheme();\n\n  const [isDrawerOpen, setDrawerOpen] = React.useState();\n\n  theme.palette.type = \"dark\";\n  React.useEffect(() => {\n    loadCSS(\n      \"https://pro.fontawesome.com/releases/v5.10.1/css/all.css\",\n      document.querySelector(\"#font-awesome-css\")\n    );\n  }, []);\n\n  const handleDrawerOpen = () => {\n    setDrawerOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setDrawerOpen(false);\n  };\n\n  return (\n    <ThemeProvider theme={globalTheme}>\n      <div className={classes.root}>\n        <CssBaseline />\n        <Drawer\n          variant=\"permanent\"\n          className={clsx(classes.drawer, {\n            [classes.drawerOpen]: isDrawerOpen,\n            [classes.drawerClose]: !isDrawerOpen\n          })}\n          classes={{\n            paper: clsx(classes.drawerPaper, {\n              [classes.drawerOpen]: isDrawerOpen,\n              [classes.drawerClose]: !isDrawerOpen\n            })\n          }}\n          open={isDrawerOpen}\n        >\n          <div className={classes.toolbar}>\n            <IconButton\n              style={!isDrawerOpen ? { margin: \"0 auto\", flex: \"unset\" } : {}}\n              onClick={isDrawerOpen ? handleDrawerClose : handleDrawerOpen}\n            >\n              {isDrawerOpen ? <ChevronLeftIcon /> : <ChevronRightIcon />}\n            </IconButton>\n          </div>\n          <Divider />\n          <div className={classes.logoContainer}>\n            {isDrawerOpen ? (\n              <img\n                alt=\"\"\n                src={`${process.env.PUBLIC_URL}/logos/logo_color.svg`}\n                className={classes.symbolLogo}\n              />\n            ) : (\n              <img\n                alt=\"\"\n                  src={`${process.env.PUBLIC_URL}/logos/simbol_color.svg`}\n                className={classes.symbolLogo}\n              />\n            )}\n          </div>\n          <Divider />\n          <List>\n            {routes.map((route, index) => (\n              <ListItem\n                component={CollisionLink(route.path)}\n                button={true}\n                key={index}>\n                <ListItemIcon>\n                  <Icon className={clsx(classes.faIcon, route.icon)} />\n                </ListItemIcon>\n                <ListItemText primary={route.name} />\n              </ListItem>\n            ))}\n          </List>\n        </Drawer>\n        <main className={classes.content}>\n          {routes.map((route, index) => (\n            <Route\n              key={index}\n              path={route.path}\n              exact={route.exact}\n              component={route.main}\n            />\n          ))}\n        </main>\n      </div>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import {\n  GlobalWarmingActions,\n  RECEIVE_REGIONS,\n  GlobalWarmingState,\n  RECEIVE_SEA_LEVELS,\n  SET_PLAYBACK_YEAR,\n  TOGGLE_PLAYBACK,\n  CLEAR_SELECTED_REGION,\n  SET_SELECTED_REGION\n} from \"./types\";\n\nconst initialState: GlobalWarmingState = {\n  uats: [],\n  counties: [],\n  seaLevels: [],\n  playback: {\n    year: new Date().getFullYear(),\n    isPlaying: false\n  }\n};\n\nexport function GlobalWarmingReducer(\n  state = initialState,\n  action: GlobalWarmingActions\n): GlobalWarmingState {\n  switch (action.type) {\n    case CLEAR_SELECTED_REGION: {\n      return {\n        ...state,\n        selectedRegion: undefined\n      };\n    }\n    case SET_SELECTED_REGION: {\n      return {\n        ...state,\n        selectedRegion: action.selectedRegion\n      };\n    }\n    case TOGGLE_PLAYBACK:\n      return {\n        ...state,\n        playback: {\n          ...state.playback,\n          isPlaying: !state.playback.isPlaying\n        }\n      };\n    case SET_PLAYBACK_YEAR:\n      return {\n        ...state,\n        playback: {\n          ...state.playback,\n          year: action.year\n        }\n      };\n    case RECEIVE_REGIONS:\n      if (action.regions.type === \"UAT\") {\n        return {\n          ...state,\n          uats: action.regions.data\n        };\n      }\n\n      return {\n        ...state,\n        counties: action.regions.data\n      };\n    case RECEIVE_SEA_LEVELS:\n      return {\n        ...state,\n        seaLevels: action.levels\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers, createStore, applyMiddleware, compose } from \"redux\";\nimport { GlobalWarmingReducer } from \"./globalwarming/reducers\";\nimport { ReduxAction, AllActionTypes } from \"./types\";\nimport thunk from \"redux-thunk\";\n\nimport { createLogger } from \"redux-logger\";\n\nconst rootReducer = combineReducers({\n  globalWarming: GlobalWarmingReducer\n});\nexport type AppState = ReturnType<typeof rootReducer>;\n\nconst actionSanitizer = (action: ReduxAction) => {\n  switch (action.type) {\n    default:\n      return action;\n  }\n};\n\nconst stateSanitizer = (state: AppState) => {\n  return state;\n};\n\nconst reduxDevtoolsExtensionOptions = {\n  actionSanitizer,\n  stateSanitizer\n};\nconst composeEnhancers =\n  ((window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ &&\n    (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__(\n      reduxDevtoolsExtensionOptions\n    )) ||\n  compose;\n\nconst logger = createLogger({\n  collapsed: true,\n  predicate: (getState: () => AppState, action: AllActionTypes) => {\n    if (process.env.NODE_ENV === \"production\") {\n      return false;\n    }\n\n    const filteredActionTypes: any[] = [];\n    if (filteredActionTypes.includes(action.type)) {\n      return false;\n    }\n\n    return true;\n  }\n});\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunk, logger))\n);\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Router basename={process.env.PUBLIC_URL}>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </Router>,\n    document.getElementById('root')\n  );\n\n  // If you want your app to work offline and load faster, you can change\n  // unregister() to register() below. Note this comes with some pitfalls.\n  // Learn more about service workers: https://bit.ly/CRA-PWA\n  serviceWorker.unregister();\n"],"sourceRoot":""}